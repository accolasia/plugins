apply plugin: 'groovy'
apply plugin: 'maven-publish'


File uploadDir = file('build/upload')
File pluginFile = file('intellij/ideaflow-plugin.zip')
File pluginXmlFile = file('intellij/META-INF/plugin.xml')

repositories {
	mavenCentral()
}

configurations {
    ftpAntTask
}

sourceSets {
	main {
		groovy {
			srcDir 'common/src'
		}
		resources {
			srcDir 'common/resources'
		}
	}

	test {
		groovy {
			srcDir 'common/test'
		}
	}
}

dependencies {
	ftpAntTask("org.apache.ant:ant-commons-net:1.9.3") {
		module("commons-net:commons-net:1.4.1") {
			dependencies "oro:oro:2.0.8:jar"
		}
	}

	compile 'org.codehaus.groovy:groovy-all:1.8.6'
	compile 'joda-time:joda-time:2.3'

	testCompile 'junit:junit:4.8.1'
	testCompile 'org.reflections:reflections:0.9.9-RC1'
	testCompile 'org.slf4j:slf4j-api:1.7.5'
}

jar.baseName = 'ideaflow-common'


task prepareRuntimeLibs(type: Copy) {
	into "common/libs/runtime"
	from configurations.runtime
}

task prepareTestLibs(type: Copy) {
	into "common/libs/test"
	from configurations.testRuntime
}

task prepareLibs {
     dependsOn { [prepareRuntimeLibs, prepareTestLibs] }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId project.ext.artifactId
            from components.java
        }
    }
}

task publishLocal(dependsOn: publishToMavenLocal)


String ftpPassword = null
task upload(dependsOn: ['assertPackagedPluginVersionMatchesVersionInSource', 'prepareFilesForUpload']) {
	doFirst {
		def console = System.console()
		if (console != null) {
			ftpPassword = console.readPassword('> Please enter ideaflow.org FTP password: ') as String
		} else {
			throw new GradleException("System.console is null, make sure you're not running gradle in daemon mode")
		}
	}
	doLast {
		ant {
			taskdef(name: 'ftp',
					classname: 'org.apache.tools.ant.taskdefs.optional.net.FTP',
					classpath: configurations.ftpAntTask.asPath)
			ftp(server: 'ideaflow.org', userid: 'ideaflow', password: ftpPassword, passive: 'yes') {
				fileset(dir: 'build/upload')
			}
		}
	}
}

task prepareFilesForUpload(dependsOn: ['createUpdatePluginXmlFile', 'copyIntellijPluginToUploadDir'])

task copyIntellijPluginToUploadDir(type: Copy, dependsOn: clean) {
	from pluginFile
	into uploadDir
	mustRunAfter clean
}

task createUpdatePluginXmlFile(dependsOn: clean) {
	mustRunAfter clean

	doLast {
		String pluginId = getPluginId(pluginXmlFile)
		String pluginVersion = getPluginVersion(pluginXmlFile)

		uploadDir.mkdirs()
		new File(uploadDir, 'updatePlugins.xml').write """<plugins>
    <plugin id="${pluginId}" url="http://ideaflow.org/${pluginFile.name}" version="${pluginVersion}"/>
</plugins>
"""
	}
}

private String getPluginId(File pluginXmlFile) {
	getPluginString(pluginXmlFile, "id", /(?m)<id>(\S+)<.id>/)
}

private String getPluginVersion(File pluginXmlFile) {
	getPluginString(pluginXmlFile, "version", /(?m)<version>(\d+\.\d+)<.version>/)
}

private String getPluginString(File file, String description, String regex) {
	String pluginXmlContent = file.text
	def matcher = pluginXmlContent =~ regex
	if (!matcher) {
		throw new GradleException("Unable to determine plugin ${description}")
	}
	matcher.group(1)
}



task extractPluginJarFromPluginArtifact(type: Copy) {
	from zipTree(pluginFile)
	into "build/tmp/"
	include "ideaflow-plugin/lib/ideaflow-plugin.jar"
	eachFile { FileCopyDetails details ->
		if (details.relativePath.isFile()) {
			details.relativePath = RelativePath.parse(true, "ideaflow-plugin.jar")
		}
	}
}

task extractPluginXmlFromPluginArtifact(type: Copy, dependsOn: extractPluginJarFromPluginArtifact) {
	from zipTree("build/tmp/ideaflow-plugin.jar")
	into "build/tmp/"
	include "META-INF/plugin.xml"
}


task assertPackagedPluginVersionMatchesVersionInSource(dependsOn: extractPluginXmlFromPluginArtifact) << {
	File packagedPluginXmlFile = file("build/tmp/META-INF/plugin.xml")

	String sourcePluginVersion = getPluginVersion(pluginXmlFile)
	String packagedPluginVersion = getPluginVersion(packagedPluginXmlFile)
	if (sourcePluginVersion != packagedPluginVersion) {
		throw new GradleException("Plugin source version=${sourcePluginVersion} does not match packaged version=${packagedPluginVersion} - "
				+ "make sure you prepared the plugin via IDEA before uploading (see Readme.md)")
	}
}
