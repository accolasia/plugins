//buildscript {
//    repositories {
//        jcenter()
//    }
//    dependencies {
//        classpath "org.grails:grails-gradle-plugin:2.1.0"
//    }
//}
//
//version '0.1'
//group 'visualizer'
//
//apply plugin: "grails"
//
//repositories {
//    mavenLocal()
//    grails.central()
//}
//
//grails {
//    grailsVersion = '2.2.4'
//    springLoadedVersion '1.1.3'
//}
//
//dependencies {
//    bootstrap 'org.grails.plugins:tomcat:2.2.4'
//
//    compile 'ideaflow:core:0.1'
//    compile 'joda-time:joda-time:2.3'
//    compile 'org.grails.plugins:cache:1.0.1'
//    compile "org.grails.plugins:compass-sass:0.7@zip"
//    compile "org.grails.plugins:standalone:1.2.3"
//
//    runtime "org.grails.plugins:jquery:1.8.3"
//    runtime "org.grails.plugins:jquery-ui:1.8.24"
//    runtime "org.grails.plugins:resources:1.2"
//}

repositories {
	mavenCentral()
}

configurations {
	ftpAntTask
}

dependencies {
	ftpAntTask("org.apache.ant:ant-commons-net:1.9.3") {
		module("commons-net:commons-net:1.4.1") {
			dependencies "oro:oro:2.0.8:jar"
		}
	}
}


File uploadDir = new File(buildDir, 'upload')
File standaloneJarFile = new File(projectDir, "target/standalone-${version}.jar")

private String getVersion() {
	project.file("application.properties").withReader { Reader reader ->
		Properties applicationProps = new Properties()
		applicationProps.load(reader)
		applicationProps["app.version"]
	}
}

String ftpPassword = null
task upload(dependsOn: ['prepareFilesForUpload']) {
	doFirst {
		def console = System.console()
		if (console != null) {
			ftpPassword = console.readPassword('> Please enter ideaflow.org FTP password: ') as String
		} else {
			throw new GradleException("System.console is null, make sure you're not running gradle in daemon mode")
		}
	}
	doLast {
		ant {
			taskdef(name: 'ftp',
					classname: 'org.apache.tools.ant.taskdefs.optional.net.FTP',
					classpath: configurations.ftpAntTask.asPath)
			ftp(server: 'ideaflow.org', userid: 'ideaflow', password: ftpPassword, passive: 'yes') {
				fileset(dir: 'build/upload')
			}
		}
	}
}

task prepareFilesForUpload(dependsOn: ['executeBuildStandalone', 'copyJarsToUploadDir'])

task cleanGrailsIvyCache(type: Delete) {
	delete new File(System.getProperty("user.home"), ".grails/ivy-cache/${project(":core").group}".toString())
}

task cleanMavenTarget(type: Delete) {
	delete file('target')
}

task prepareCoreLib(dependsOn: [':core:check', ':core:publishLocal'])

task executeBuildStandalone(dependsOn: ['cleanGrailsIvyCache', 'cleanMavenTarget', 'prepareCoreLib']) << {
    println "Building standalone jar..."
    def process = "grails build-standalone".execute()
    println process.text
}

task copyJarsToUploadDir(dependsOn: ['copyStandaloneJarToUploadDir', 'copyStandaloneJarToUploadDirAsLatest']) {
	mustRunAfter executeBuildStandalone
}

task copyStandaloneJarToUploadDir(type: Copy) {
	from standaloneJarFile
	into uploadDir
    rename { String fileName ->
        fileName.replace("standalone", "visualizer")
    }
}

task copyStandaloneJarToUploadDirAsLatest(type: Copy) {
	from standaloneJarFile
	into uploadDir
    rename { String fileName ->
        "visualizer-latest.jar"
    }
}